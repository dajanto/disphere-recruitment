
disphere
	- Entwickler für Apps, Websites und E-Commerce

1. 

GET

	- Daten in der URL
	- Gut geeignet für unsensible Daten (Wiederverwendbarkeit bei Bookmarks, Google Maps z.B.)

POST

	- Daten unsichtbar im HTTP-Request
	- Gut geeignet für sensible Daten


GraphQL

	Query Language für POST-Anfragen an eine API

	- Passgenaue Anfragen 
	- Serverseitig festgelegtes Typ-System
	- Üblicherweise via URL laufend
	- JSON-Output

	Meinung:

	- Data Fetching Probleme effizienter lösbar als mit REST 
	- Flexibler als ältere Technologien
	- An heutige Probleme angepasst

	- Blogging-Website-Beispiel 
		- Für User, Posts, Follower jeweils eine Anfrage
		- Bei GraphQL nur eine Anfrage

	Weitere Vorteile:
		- Backend Statistiken extrahierbar
		- Client-Side Changes einfach umsetzbar

	SOAP (Protokoll) ist outdated, weil es z.B. nur mit XML umgehen kann, REST hat es weitestgehend abgelöst


Angular

	Frontend web framework for creating sophisticated apps

	Tutorial 

	Template
		- Anhand eines Webshops wurden verschiedene Features gezeigt, die man in HTML Tags integrieren kann
		- Produkte sollten angezeigt werden mit *ngFor im <div> (Iterate over predefined list)
		- {{ product.name }} führte zum eigentlichen Anzeigen
		- <a [title="foobar"] führte zum Mouseover Detailanzeigen
		- <p *ngIf> mit {{product.description}}, dass eine Description angezeigt wird, wenn es eine gibt
		- <button (click)="share()"> zum Erstellen eines Buttons zum Sharen von Informationen


		Basics 
			- *ngFor
			- *ngIf
			- Interpolation {{ }}
			- Property Binding [ ]
			- Event Binding ( )

	Component		
		- Component class (data and functionality (share()))
		- Template class (UI stuff)
		- Component specific styles (CSS stuff)


	Der Webshop hat drei Komponenten
		- app-root	
		- app-top-bar
		- app-product-list


	Input

		Neue Komponente wird erstellt (Mit selector, templates and styles)

		Ein Produkt mit Wert ab 700 soll einen Notify Button erhalten

		Die Product Alert Component nimmt als Input ein Produkt und schaut sich den Preis 
		PAC ist ein Child der Product List


	Output
	
		Die Product Alert Component muss noch ein Event emitten und die Product List muss entsprechend reagieren

		share() --> window.alert("foo")
		onNotify() --> window.alert("bar")


Lodash

	Convenience JS framework for common programming tasks using functional programming paradigms

