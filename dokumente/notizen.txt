1. 

GET

	- Daten in der URL
	- Gut geeignet für unsensible Daten (Wiederverwendbarkeit bei Bookmarks, Google Maps z.B.)

POST

	- Daten unsichtbar im HTTP-Request
	- Gut geeignet für sensible Daten


GraphQL

	Query Language für POST-Anfragen an eine API

	Mit einer Anfrage kann bestimmt werden, was genau an Daten returnt werden soll
	Zuvor wird Serversided festgelegt, welches Type System genutzt wird
	Der Service läuft typischerweise auf einer URL, es wird geprüft, ob die Anfrage den definierten Werten entspricht
	Wenn alles glatt läuft, erhält man ein entsprechendes JSON-Result

	Meinung:

	- Mit modernen Frameworks können Data Fetching Probleme effizienter gelöst werden als mit der herkömmlichen REST-Architektur. 
	- In dem einen Tutorial um eine Blogging-Website, wo jeweils Anfragen für User, Posts und Follower einzeln gestellt werden mussten, um die Daten anschließend zu verarbeiten.
	- Bei GraphQL muss man für denselben Fall bloß nur eine Anfrage stellen und man kann genau spezifizieren, welche Daten returnt werden sollen.

	Weitere Vorteile:
		- Backend Statistiken können genau nutzerweise aufgestellt und analysiert werden
		- Client-Side Changes sind ohne weitere Backend-Änderungen umsetzbar


	SOAP (Protokoll) ist outdated, weil es z.B. nur mit XML umgehen kann, REST hat es weitestgehend abgelöst



Angular

	Frontend web framework for creating sophisticated apps

	Tutorial 

	Template
		- Anhand eines Webshops wurden verschiedene Features gezeigt, die man in HTML Tags integrieren kann
		- Produkte sollten angezeigt werden mit *ngFor im <div> (Iterate over predefined list)
		- {{ product.name }} führte zum eigentlichen Anzeigen
		- <a [title="foobar"] führte zum Mouseover Detailanzeigen
		- <p *ngIf> mit {{product.description}}, dass eine Description angezeigt wird, wenn es eine gibt
		- <button (click)="share()"> zum Erstellen eines Buttons zum Sharen von Informationen


		Basics 
			- *ngFor
			- *ngIf
			- Interpolation {{ }}
			- Property Binding [ ]
			- Event Binding ( )

	Component		
		- Component class (data and functionality (share()))
		- Template class (UI stuff)
		- Component specific styles (CSS stuff)


	Der Webshop hat drei Komponenten
		- app-root	
		- app-top-bar
		- app-product-list


	Input

		// TODO
		
		Neue Komponente wird erstellt (Mit selector, templates and styles)

		Ein Produkt mit Wert ab 700 soll einen Notify Button erhalten


	Output

		// TODO

		share() --> window.alert("foo")
		onNotify() --> window.alert("bar")

	

Lodash

	Convenience JS framework for common programming tasks using functional programming paradigms

